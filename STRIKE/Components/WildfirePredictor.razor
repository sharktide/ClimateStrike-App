@using STRIKE
@using STRIKE.Inference

<MudPaper Elevation="3" Class="pa-4">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSlider T="float"
                       Min="@TemperatureMin"
                       Max="@TemperatureMax"
                       Step="1f"
                       @bind-Value="_temperature"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Temperature: </MudText>
                        <MudText Color="Color.Primary">@_temperature.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_temperatureUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("K")"><MudText Color="Color.Primary">Kelvin</MudText></MudSelectItem>
                            <MudSelectItem Value="@("C")"><MudText Color="Color.Primary">°C</MudText></MudSelectItem>
                            <MudSelectItem Value="@("F")"><MudText Color="Color.Primary">°F</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudSlider T="float" Min="0f" Max="100f" Step="1f" @bind-Value="_humidity"
                       Variant="Variant.Filled" Color="Color.Success"
                       ValueLabel="true">
                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                            <MudText>Humidity: </MudText>
                            <MudText Color="Color.Primary">@_humidity.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_humidityUnit" Class="ml-2" Style="width: 80px;">
                                <MudSelectItem Value="@("%")"><MudText Color="Color.Primary">%</MudText></MudSelectItem>
                            </MudSelect>
                        </MudStack>
            </MudSlider>

            <MudSlider T="float"
                       Min="@WindSpeedMin"
                       Max="@WindSpeedMax"
                       Step="1f"
                       @bind-Value="_windSpeed"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Wind Speed: </MudText>
                        <MudText Color="Color.Primary">@_windSpeed.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_windSpeedUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("m/s")"><MudText Color="Color.Primary">m/s</MudText></MudSelectItem>
                            <MudSelectItem Value="@("km/h")"><MudText Color="Color.Primary">kph</MudText></MudSelectItem>
                            <MudSelectItem Value="@("mp/h")"><MudText Color="Color.Primary">mph</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <!-- Elevation Slider -->
            <MudSlider T="float"
                       Min="@ElevationMin"
                       Max="@ElevationMax"
                       Step="10f"
                       @bind-Value="_elevation"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Elevation: </MudText>
                        <MudText Color="Color.Primary">@_elevation.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_elevationUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("m")"><MudText Color="Color.Primary">m</MudText></MudSelectItem>
                            <MudSelectItem Value="@("ft")"><MudText Color="Color.Primary">ft</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            
            <MudSlider T="float" Min="0f" Max="2.0f" Step="0.01f"
                       @bind-Value="_vegetationIndex"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Vegitation Index: </MudText>
                        <MudText Color="Color.Primary">@_vegetationIndex.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_vegUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("NDVI")"><MudText Color="Color.Primary">NDVI</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudStack Row="false" Spacing="2" Class="mt-4">
                <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center">
                    <MudCheckBox @bind-Value="_useTrust" T="bool" Label="Use FireTrustNet" Color="Color.Primary" />
                    
                    <MudCheckBox @bind-Value="_useInternet"
                                T="bool"
                                Label="Use Internet"
                                Disabled="_isApplePlatform"
                                Color="Color.Secondary" />
                </MudStack>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RunPrediction" Class="mt-4">Predict</MudButton>
            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                            <MudText>Feature Definitions</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <strong>Temperature:</strong> Current Temperature <br /><br />

                        <strong>Humidity:</strong> Current Humidity <br /><br />

                        <strong>Wind Speed:</strong> Average Wind Speed in Targeted Area <br /><br />

                        <strong>Elevation:</strong> Current Elevation Relative to Sea Level <br /><br />

                        <strong>Vegitation Index</strong> Target Area's NDVI score
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <br />
            <MudText Typo="Typo.h6" Class="mb-2">Wildfire Risk Verdict</MudText>
            <MudTextField T="string" Value="@_predictionResult" ReadOnly="true" FullWidth="true" />
            @if (_showAlert)
            {
                <MudAlert Severity="@_alertSeverity" Elevation="1" Dense="true" Class="mt-2">
                    @_alertMessage
                </MudAlert>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private string[] _spinnerFrames = new[] { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" };
    private int _spinnerIndex = 0;
    private Timer? _spinnerTimer;
    private bool _isPredicting = false;

    private string _alertMessage = "";
    private Severity _alertSeverity = Severity.Normal;
    private bool _showAlert = false;

    private void StartSpinner()
    {
        _isPredicting = true;
        _showAlert = false;
        _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
        _spinnerTimer = new Timer(_ =>
        {
            _spinnerIndex = (_spinnerIndex + 1) % _spinnerFrames.Length;
            _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
            InvokeAsync(StateHasChanged);
        }, null, 0, 100);
    }

    private void StopSpinner()
    {
        _spinnerTimer?.Dispose();
        _spinnerTimer = null;
    }
    private bool _useInternet = true;
    private bool _isApplePlatform = OperatingSystem.IsIOS() || OperatingSystem.IsMacOS();
    protected override void OnInitialized()
    {
        if (_isApplePlatform)
        {
            _useInternet = true;
        }
    }
    private float _temperature = 310f;
    private float _humidity = 10f;
    private float _windSpeed = 6f;
    private float _elevation = 1500f;
    private float _vegetationIndex = 0.8f;
    private bool _useTrust = true;
    private string _temperatureUnit = "K";
    private string _windSpeedUnit = "m/s";
    private string _elevationUnit = "m";
    private string _humidityUnit = "%";
    private string _vegUnit = "NDVI";

    private string _predictionResult = "";
    private float TemperatureMin => _temperatureUnit switch {
        "C" => -50f,
        "F" => -58f,
        _ => 223f
    };

    private float TemperatureMax => _temperatureUnit switch {
        "C" => 60f,
        "F" => 140f,
        _ => 333f
    };

    private float WindSpeedMin => _windSpeedUnit switch {
        "km/h" => 0f,
        "mp/h" => 0f,
        _ => 0f
    };

    private float WindSpeedMax => _windSpeedUnit switch {
        "km/h" => 180f,
        "mp/h" => 110f,
        _ => 50f
    };

    private float ElevationMin => _elevationUnit switch {
        "ft" => 0f,
        _ => 0f
    };

    private float ElevationMax => _elevationUnit switch {
        "ft" => 10000f,
        _ => 3000f
    };

    private async Task RunPrediction()
    {
        StartSpinner();
        try {   
            var input = new float[]
            {
                ConvertTemperature(_temperature, _temperatureUnit),
                _humidity,
                ConvertWindSpeed(_windSpeed, _windSpeedUnit),
                _vegetationIndex,
                ConvertElevation(_elevation, _elevationUnit)
            };

            _predictionResult = await Task.Run(() => WildfireModelRunner.Predict(input, _useTrust, _useInternet));
            _alertMessage = "Prediction successful.";
            _alertSeverity = Severity.Success;
            _showAlert = true;
        }
        catch(Exception ex)
        {
            _predictionResult = " ";
            _alertMessage = $"Prediction failed. {ex}";
            _alertSeverity = Severity.Error;
            _showAlert = true;
        }
        finally
        {
            StopSpinner();
        }
    }

    private float ConvertTemperature(float value, string unit) =>
        unit switch
        {
            "C" => value + 273.15f,
            "F" => (value - 32f) * 5f / 9f + 273.15f,
            _ => value
        };

    private float ConvertWindSpeed(float value, string unit) =>
        unit switch
        {
            "km/h" => value / 3.6f,
            "mp/h" => value * 0.44704f,
            _ => value
        };

    private float ConvertElevation(float value, string unit) =>
        unit switch
        {
            "ft" => value * 0.3048f,
            _ => value
        };

    private void ResetPrediction()
    {
        _predictionResult = "";
        _showAlert = false;
    }
    private Dictionary<string, object> _lastInputs = new();
    protected override void OnParametersSet()
    {
        CheckForInputChanges();
    }

    private void CheckForInputChanges()
    {
        var currentInputs = new Dictionary<string, object>
        {
            { "temperature", _temperature },
            { "humidity", _humidity },
            { "windSpeed", _windSpeed },
            { "elevation", _elevation },
            { "vegetationIndex", _vegetationIndex },
            { "useTrust", _useTrust },
            { "temperatureUnit", _temperatureUnit },
            { "windSpeedUnit", _windSpeedUnit },
            { "elevationUnit", _elevationUnit },
            { "humidityUnit", _humidityUnit },
            { "vegUnit", _vegUnit }
        };

        foreach (var kvp in currentInputs)
        {
            if (!_lastInputs.ContainsKey(kvp.Key) || !_lastInputs[kvp.Key].Equals(kvp.Value))
            {
                ResetPrediction();
                break;
            }
        }

        _lastInputs = currentInputs;
    }
}
