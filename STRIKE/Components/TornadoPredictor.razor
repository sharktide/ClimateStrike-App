@using STRIKE
@using STRIKE.Inference

<MudPaper Elevation="3" Class="pa-4">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSlider T="float" Min="100f" Max="500f" Step="1f" @bind-Value="_srh"
                       Variant="Variant.Filled" Color="Color.Success" ValueLabel="true">
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudText>Storm Relative Helicity (SRH):</MudText>
                    <MudText Color="Color.Primary">@_srh.ToString()</MudText>
                    <MudSelect T="string" Dense="true" @bind-Value="_1" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("1")"><MudText Color="Color.Primary">m²/s²</MudText></MudSelectItem>
                    </MudSelect>
                </MudStack>
            </MudSlider>
            <MudSlider T="float" Min="0f" Max="4000f" Step="1f" @bind-Value="_cape"
                       Variant="Variant.Filled" Color="Color.Success" ValueLabel="true">
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudText>CAPE:</MudText>
                    <MudText Color="Color.Primary">@_cape.ToString()</MudText>
                    <MudSelect T="string" Dense="true" @bind-Value="_2" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("2")"><MudText Color="Color.Primary">J/Kg</MudText></MudSelectItem>
                    </MudSelect>
                </MudStack>
            </MudSlider>
            <MudSlider T="float" Min="300f" Max="2000f" Step="1f" @bind-Value="_lcl"
                       Variant="Variant.Filled" Color="Color.Success" ValueLabel="true">
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudText>Lifted Condensation Level (LCL):</MudText>
                    <MudText Color="Color.Primary">@_lcl.ToString()</MudText>
                    <MudSelect T="string" Dense="true" @bind-Value="_3" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("3")"><MudText Color="Color.Primary">m</MudText></MudSelectItem>
                    </MudSelect>
                </MudStack>
            </MudSlider>
            <MudSlider T="float" Min="0f" Max="30f" Step="1f" @bind-Value="_shear"
                       Variant="Variant.Filled" Color="Color.Success" ValueLabel="true">
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudText>Bulk Wind Shear:</MudText>
                    <MudText Color="Color.Primary">@_shear.ToString()</MudText>
                    <MudSelect T="string" Dense="true" @bind-Value="_4" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("4")"><MudText Color="Color.Primary">m/s</MudText></MudSelectItem>
                    </MudSelect>
                </MudStack>
            </MudSlider>
            <MudSlider T="float" Min="0.0f" Max="5.0f" Step="0.01f" @bind-Value="_stp"
                       Variant="Variant.Filled" Color="Color.Success" ValueLabel="true">
                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                    <MudText>Significant Tornado Parameter (STP):</MudText>
                    <MudText Color="Color.Primary">@_stp.ToString("0.00")</MudText>
                    <MudSelect T="string" Dense="true" @bind-Value="_5" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("5")"><MudText Color="Color.Primary">STP</MudText></MudSelectItem>
                    </MudSelect>
                </MudStack>
            </MudSlider>
            <MudStack Row="false" Spacing="2" Class="mt-4">
                <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center">
                    <MudCheckBox @bind-Value="_useTrust" T="bool" Label="Use TornadoTrustNet" Color="Color.Primary" />
                    
                    <MudCheckBox @bind-Value="_useInternet"
                                T="bool"
                                Label="Use Internet"
                                Disabled="_isApplePlatform"
                                Color="Color.Secondary" />
                </MudStack>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RunPrediction" Class="mt-4">Predict</MudButton>
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                            <MudText>Feature Definitions</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <strong>Storm Relative Helicity (SRH):</strong> Measures potential for rotating updrafts <br /><br />

                        <strong>CAPE (J/kg):</strong> Buoyant energy available for strong vertical motion <br /><br />

                        <strong>Lifted Condensation Level (LCL) [m]:</strong> Lower values favor low-level vortex development <br /><br />

                        <strong>0-6 km Bulk Wind Shear [m/s]:</strong> Change in wind speed and direction on the surface within 6km.<br /><br />

                        <strong>Significant Tornado Parameter (STP):</strong> Significant Tornado Parameter Rating
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <br />
            <MudText Typo="Typo.h6" Class="mb-2">Tornado Formation Verdict</MudText>
            <MudTextField T="string" Value="@_predictionResult" ReadOnly="true" FullWidth="true" />
            @if (_showAlert)
            {
                <MudAlert Severity="@_alertSeverity" Elevation="1" Dense="true" Class="mt-2">
                    @_alertMessage
                </MudAlert>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private string[] _spinnerFrames = new[] { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" };
    private int _spinnerIndex = 0;
    private Timer? _spinnerTimer;
    private bool _isPredicting = false;

    private string _alertMessage = "";
    private Severity _alertSeverity = Severity.Normal;
    private bool _showAlert = false;

    private void StartSpinner()
    {
        _isPredicting = true;
        _showAlert = false;
        _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
        _spinnerTimer = new Timer(_ =>
        {
            _spinnerIndex = (_spinnerIndex + 1) % _spinnerFrames.Length;
            _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
            InvokeAsync(StateHasChanged);
        }, null, 0, 100);
    }

    private void StopSpinner()
    {
        _spinnerTimer?.Dispose();
        _spinnerTimer = null;
    }
    private bool _useInternet = true;
    private bool _isApplePlatform = OperatingSystem.IsIOS() || OperatingSystem.IsMacOS();
    protected override void OnInitialized()
    {
        if (_isApplePlatform)
        {
            _useInternet = true;
        }
    }
    private float _srh = 280f;
    private float _cape = 3000f;
    private float _lcl = 950f;
    private float _shear = 12f;
    private float _stp = 1.8f;
    private bool _useTrust = true;
    private string _predictionResult = "";

    private string _1 = "1";
    private string _2 = "2";
    private string _3 = "3";
    private string _4 = "4";
    private string _5 = "5";

    private async Task RunPrediction()
    {
        StartSpinner();
        try
        {
            var input = new float[]
            {
                _srh,
                _cape,
                _lcl,
                _shear,
                _stp
            };

            _predictionResult = await Task.Run(() => TornadoModelRunner.Predict(input, _useTrust, _useInternet));
            _alertMessage = "Prediction successful.";
            _alertSeverity = Severity.Success;
            _showAlert = true;
        }
        catch (Exception ex)
        {
            _predictionResult = " ";
            _alertMessage = $"Prediction failed. {ex.Message}";
            _alertSeverity = Severity.Error;
            _showAlert = true;
        }
        finally
        {
            StopSpinner();
        }
    }
    private void ResetPrediction()
    {
        _predictionResult = "";
        _showAlert = false;
    }
}