@using STRIKE
@using STRIKE.Inference

<MudPaper Elevation="3" Class="pa-4">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSlider T="float"
                       Min="0f"
                       Max="@RainfallMax"
                       Step="0.5f"
                       @bind-Value="_rainfall"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Rainfall: </MudText>
                        <MudText Color="Color.Primary">@_rainfall.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_rainfallUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("mm")"><MudText Color="Color.Primary">mm/hr</MudText></MudSelectItem>
                            <MudSelectItem Value="@("in")"><MudText Color="Color.Primary">in/hr</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudSlider T="float" Min="0f" Max="6000f" Step="1f" @bind-Value="_rwl"
                       Variant="Variant.Filled" Color="Color.Success"
                       ValueLabel="true">
                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                            <MudText>Relative Water Level: </MudText>
                            <MudText Color="Color.Primary">@_rwl.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_rwlUnit" Class="ml-2" Style="width: 80px;">
                                <MudSelectItem Value="@("mm")"><MudText Color="Color.Primary">mm</MudText></MudSelectItem>
                            </MudSelect>
                        </MudStack>
            </MudSlider>

            <MudSlider T="float"
                       Min="0"
                       Max="90"
                       Step="1f"
                       @bind-Value="_slope"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Relative Slope: </MudText>
                        <MudText Color="Color.Primary">@_slope.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_slopeUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("s")"><MudText Color="Color.Primary">°</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudSlider T="float"
                       Min="@ElevationMin"
                       Max="@ElevationMax"
                       Step="10f"
                       @bind-Value="_elevation"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Relative Elevation: </MudText>
                        <MudText Color="Color.Primary">@_elevation.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_elevationUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("m")"><MudText Color="Color.Primary">m</MudText></MudSelectItem>
                            <MudSelectItem Value="@("ft")"><MudText Color="Color.Primary">ft</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            
            <MudSlider T="float" Min="0f" Max="@distMax" Step="1f"
                       @bind-Value="_dist"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Distance From River: </MudText>
                        <MudText Color="Color.Primary">@_dist.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_distUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("m")"><MudText Color="Color.Primary">m</MudText></MudSelectItem>
                            <MudSelectItem Value="@("ft")"><MudText Color="Color.Primary">ft</MudText></MudSelectItem>

                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudStack Row="false" Spacing="2" Class="mt-4">
            <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center">
                <MudCheckBox @bind-Value="_useTrust" T="bool" Label="Use FV-FloodTrustNet" Color="Color.Primary" />
                
                <MudCheckBox @bind-Value="_useInternet"
                            T="bool"
                            Label="Use Internet"
                            Disabled="_isApplePlatform"
                            Color="Color.Secondary" />
            </MudStack>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RunPrediction" Class="mt-4">Predict</MudButton>
            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                            <MudText>Feature Definitions</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <strong>Rainfall:</strong> Rainfall rate in mm/hr or in/hr <br /><br />

                        <strong>Relative Water Level:</strong> Water level relative to river surface as 3000mm <br /><br />

                        <strong>Relative Slope:</strong> Relative slope of the terrain in degrees. <br /><br />

                        <strong>Relative Elevation:</strong> Elevation above river water level in meters or feet. <br /><br />

                        <strong>Distance From River:</strong> Distance from the river in meters or feet.
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <br />
            <MudText Typo="Typo.h6" Class="mb-2">Fluvial Flood Risk Verdict</MudText>
            <MudTextField T="string" Value="@_predictionResult" ReadOnly="true" FullWidth="true" />
            @if (_showAlert)
            {
                <MudAlert Severity="@_alertSeverity" Elevation="1" Dense="true" Class="mt-2">
                    @_alertMessage
                </MudAlert>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private string[] _spinnerFrames = new[] { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" };
    private int _spinnerIndex = 0;
    private Timer? _spinnerTimer;
    private bool _isPredicting = false;

    private string _alertMessage = "";
    private Severity _alertSeverity = Severity.Normal;
    private bool _showAlert = false;

    private void StartSpinner()
    {
        _isPredicting = true;
        _showAlert = false;
        _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
        _spinnerTimer = new Timer(_ =>
        {
            _spinnerIndex = (_spinnerIndex + 1) % _spinnerFrames.Length;
            _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
            InvokeAsync(StateHasChanged);
        }, null, 0, 100);
    }

    private void StopSpinner()
    {
        _spinnerTimer?.Dispose();
        _spinnerTimer = null;
    }
    private bool _useInternet = true;
    private bool _isApplePlatform = OperatingSystem.IsIOS() || OperatingSystem.IsMacOS();
    protected override void OnInitialized()
    {
        if (_isApplePlatform)
        {
            _useInternet = true;
        }
    }
    private float _rainfall = 40;
    private float _rwl = 3000f;
    private float _elevation = 5f;
    private float _slope = 5f;
    private float _dist = 25f;
    private bool _useTrust = true;
    private string _rainfallUnit = "mm";
    private string _rwlUnit = "mm";
    private string _elevationUnit = "m";
    private string _slopeUnit = "s";
    private string _distUnit = "m";

    private string _predictionResult = "";

    private float RainfallMax => _rainfallUnit switch {
        "mm" => 200f,
        _ => 20f
    };

    private float distMax => _distUnit switch {
        "m" => 2000f,
        _ => 6000f
    };

    private float ElevationMin => _elevationUnit switch {
        "ft" => 0f,
        _ => 0f
    };

    private float ElevationMax => _elevationUnit switch {
        "ft" => 10000f,
        _ => 3000f
    };

    private async Task RunPrediction()
    {
        StartSpinner();

        try
        {
            var input = new float[]
            {
                _ConvertRainfall(_rainfall, _rainfallUnit),
                _rwl,
                _ConvertMeter(_elevation, _elevationUnit),
                _slope,
                _ConvertMeter(_dist, _distUnit)
            };

            _predictionResult = await Task.Run(() => FVFloodModelRunner.Predict(input, _useTrust, _useInternet));

            _alertMessage = "Prediction successful.";
            _alertSeverity = Severity.Success;
            _showAlert = true;
        }
        catch (Exception ex)
        {
            _predictionResult = " ";
            _alertMessage = $"Prediction failed. {ex.Message}";
            _alertSeverity = Severity.Error;
            _showAlert = true;
        }
        finally
        {
            StopSpinner();
        }
    }

    private float _ConvertRainfall(float value, string unit) =>
        unit switch
        {
            "mm" => value,
            _ => (value * 25.4f)
        };

    private float _ConvertMeter(float value, string unit) =>
        unit switch
        {
            "ft" => value * 0.3048f,
            _ => value
        };
    private void ResetPrediction()
    {
        _predictionResult = "";
        _showAlert = false;
    }
    private Dictionary<string, object> _lastInputs = new();
    protected override void OnParametersSet()
    {
        CheckForInputChanges();
    }

    private void CheckForInputChanges()
    {
        var currentInputs = new Dictionary<string, object>
        {
            { "rainfall", _rainfall },
            { "rwl", _rwl },
            { "elevation", _elevation },
            { "slope", _slope },
            { "dist", _dist },
            { "useTrust", _useTrust },
            { "rainfallUnit", _rainfallUnit },
            { "rwlUnit", _rwlUnit },
            { "elevationUnit", _elevationUnit },
            { "slopeUnit", _slopeUnit },
            { "distUnit", _distUnit }
        };
        foreach (var kvp in currentInputs)
        {
            if (!_lastInputs.ContainsKey(kvp.Key) || !_lastInputs[kvp.Key].Equals(kvp.Value))
            {
                ResetPrediction();
                break;
            }
        }

        _lastInputs = currentInputs;
    }
}
