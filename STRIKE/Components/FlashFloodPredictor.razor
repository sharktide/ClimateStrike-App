@using STRIKE;
@using STRIKE.Inference;

<MudPaper Elevation="3" Class="pa-4">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSlider T="float"
                       Min="0f"
                       Max="@RainfallMax"
                       Step="0.5f"
                       @bind-Value="_rainfall"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Rainfall Intensity: </MudText>
                        <MudText Color="Color.Primary">@_rainfall.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_rainfallUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("mm")"><MudText Color="Color.Primary">mm/hr</MudText></MudSelectItem>
                            <MudSelectItem Value="@("in")"><MudText Color="Color.Primary">in/hr</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudSlider T="float" Min="0f" Max="45f" Step="1f" @bind-Value="_slope"
                       Variant="Variant.Filled" Color="Color.Success"
                       ValueLabel="true">
                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                            <MudText>Terrain Gradient: </MudText>
                            <MudText Color="Color.Primary">@_slope.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_slopeUnit" Class="ml-2" Style="width: 80px;">
                                <MudSelectItem Value="@("°")"><MudText Color="Color.Primary">°</MudText></MudSelectItem>
                            </MudSelect>
                        </MudStack>
            </MudSlider>

            <MudSlider T="float"
                       Min="0"
                       Max="5"
                       Step="0.01f"
                       @bind-Value="_dd"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Drainage Density: </MudText>
                        <MudText Color="Color.Primary">@_dd.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_ddUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("s")"><MudText Color="Color.Primary">L/A</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudSlider T="float"
                       Min="0f"
                       Max="1f"
                       Step="0.01f"
                       @bind-Value="_ui"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Soil Saturation: </MudText>
                        <MudText Color="Color.Primary">@_ui.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_uiUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("m")"><MudText Color="Color.Primary">VWC</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            
            <MudSlider T="float" Min="0f" Max="1f" Step="0.01f"
                       @bind-Value="_ci"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       ValueLabel="true">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>Convergence Index: </MudText>
                        <MudText Color="Color.Primary">@_ci.ToString()</MudText>
                        <MudSelect T="string" Dense="true" @bind-Value="_ciUnit" Class="ml-2" Style="width: 80px;">
                            <MudSelectItem Value="@("m")"><MudText Color="Color.Primary">CI</MudText></MudSelectItem>
                        </MudSelect>
                    </MudStack>
            </MudSlider>

            <MudStack Row="false" Spacing="2" Class="mt-4">
                <MudStack Row="true" Spacing="3" AlignItems="AlignItems.Center">
                    <MudCheckBox @bind-Value="_useTrust" T="bool" Label="Use FlashFloodTrustNet" Color="Color.Primary" />
                    
                    <MudCheckBox @bind-Value="_useInternet"
                                T="bool"
                                Label="Use Internet"
                                Disabled="_isApplePlatform"
                                Color="Color.Secondary" />
                </MudStack>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RunPrediction" Class="mt-4">Predict</MudButton>
            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                            <MudText>Feature Definitions</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <strong>Rainfall Intensity:</strong> Rainfall rate in mm/hr or in/hr. <br /><br />

                        <strong>Terrain Gradient:</strong> Slope of the terrain in degrees. <br /><br />

                        <strong>Drainage Density:</strong> Total stream length per unit area. <br /><br />

                        <strong>Soil Saturation:</strong> Volumetric water content (VWC). <br /><br />

                        <strong>Convegence Index:</strong> Topographical tendency to channel runoff.
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            <br />
            <MudText Typo="Typo.h6" Class="mb-2">Flash Flood Risk Verdict</MudText>
            <MudTextField T="string" Value="@_predictionResult" ReadOnly="true" FullWidth="true" />
            @if (_showAlert)
            {
                <MudAlert Severity="@_alertSeverity" Elevation="1" Dense="true" Class="mt-2">
                    @_alertMessage
                </MudAlert>
            }
        </MudItem>
    </MudGrid>

</MudPaper>

@code {
    private string[] _spinnerFrames = new[] { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" };
    private int _spinnerIndex = 0;
    private Timer? _spinnerTimer;
    private bool _isPredicting = false;

    private string _alertMessage = "";
    private Severity _alertSeverity = Severity.Normal;
    private bool _showAlert = false;

    private void StartSpinner()
    {
        _isPredicting = true;
        _showAlert = false;
        _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
        _spinnerTimer = new Timer(_ =>
        {
            _spinnerIndex = (_spinnerIndex + 1) % _spinnerFrames.Length;
            _predictionResult = $"{_spinnerFrames[_spinnerIndex]} Predicting...";
            InvokeAsync(StateHasChanged);
        }, null, 0, 100);
    }

    private void StopSpinner()
    {
        _spinnerTimer?.Dispose();
        _spinnerTimer = null;
    }
    private bool _useInternet = true;
    private bool _isApplePlatform = OperatingSystem.IsIOS() || OperatingSystem.IsMacOS();
    protected override void OnInitialized()
    {
        if (_isApplePlatform)
        {
            _useInternet = true;
        }
    }
    private float _rainfall = 20;
    private float _slope = 5f;
    private float _ui = 0.6f;
    private float _dd = 2.5f;
    private float _ci = 0.5f;
    private bool _useTrust = true;
    private string _rainfallUnit = "mm";
    private string _slopeUnit = "°";
    private string _uiUnit = "m";
    private string _ddUnit = "s";
    private string _ciUnit = "m";

    private string _predictionResult = "";

    private float RainfallMax => _rainfallUnit switch {
        "mm" => 150f,
        _ => 15f
    };

    private async Task RunPrediction()
    {
        StartSpinner();

        try
        {
            var input = new float[]
            {
                _ConvertRainfall(_rainfall, _rainfallUnit),
                _slope,
                _dd,
                _ui,
                _ci
            };

            _predictionResult = await Task.Run(() => FlashFloodModelRunner.Predict(input, _useTrust, _useInternet));

            _alertMessage = "Prediction successful.";
            _alertSeverity = Severity.Success;
            _showAlert = true;
        }
        catch (Exception ex)
        {
            _predictionResult = " ";
            _alertMessage = $"Prediction failed. {ex.Message}";
            _alertSeverity = Severity.Error;
            _showAlert = true;
        }
        finally
        {
            StopSpinner();
        }
    }

    private float _ConvertRainfall(float value, string unit) =>
        unit switch
        {
            "mm" => value,
            _ => (value * 25.4f)
        };
    private void ResetPrediction()
    {
        _predictionResult = "";
        _showAlert = false;
    }
}
